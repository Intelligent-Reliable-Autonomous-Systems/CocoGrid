[project]
name = "cocogrid"
version = "0.2.0"
description = "A continuous extension of Minigrid gridworld environments to Box2D and MuJoCo"
requires-python = ">= 3.9"
authors = [
    {name = "Jeff Jewett", email = "jewettje@oregonstate.edu"},
]
license = "MIT"
license-files = ["LICENSE.txt"]
homepage = "https://gitlab.engr.oregonstate.edu/jewettje/minimujo"
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
dependencies = [
    "dm-control",
    "gymnasium",
    "labmaze",
    "minigrid",
]

[project.optional-dependencies]
dev = [
    "ruff",
    "mypy",
]

[project.scripts]
cocogrid = "cocogrid.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff.lint]
# Enable pycodestyle (`E`), Pyflakes (`F`), and isort (`I`) codes
select = [
    "ANN",       # flake8-annotations: Enforces function type hints
    "D",         # pydocstyle: Enforces docstring format (helps with type hints)
    "E", "W",    # pycodestyle: Standard PEP 8 errors & warnings
    "F",         # Pyflakes: Detects undefined variables, unused imports, etc.
    "FA",        # flake8-future-annotations: Encourages `from __future__ import annotations`
    "B",         # flake8-bugbear: Finds likely bugs & design issues
    "SIM",       # flake8-simplify: Simplifies redundant expressions
    "TC",        # flake8-type-checking: Encourages proper `TYPE_CHECKING` usage
    "PERF",      # Perflint: Performance optimizations
    "UP",        # pyupgrade: Keeps syntax modern
    "RUF",       # Ruff-specific improvements
    "C4",        # flake8-comprehensions: Optimize list/set comprehensions
    "RET",       # flake8-return: Enforces consistent return statements
    "ARG",       # flake8-unused-arguments: Flags unused function arguments
    "PTH",       # flake8-use-pathlib: Encourages `pathlib` over `os.path`
    "ISC",       # flake8-implicit-str-concat: Catches unintended string concatenation
    "ICN",       # flake8-import-conventions: Enforces import naming conventions
    "I",         # isort: Automatically sorts imports
    "TRY",       # tryceratops: Improves exception handling
    "N",         # pep8-naming: Enforces naming conventions
]
preview = true
explicit-preview-rules = true

ignore = [
    "ARG001",  # Allow unused arguments
    "ARG005",  # Allow unused lambda arguments
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff]
line-length = 120

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"  # Enforce double quotes for strings
multiline-quotes = "double"  # Enforce double quotes for multiline strings
docstring-quotes = "double"  # Enforce double quotes for docstrings

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.mypy]
python_version = ">=3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true